package;

import messageformat.ICURule;

class TestICUNamedKey extends TestSuite
{
    public function new(verbose:Bool = false)
    {
        super(verbose);

        this.add("en")
            .expect("one", [ "value" => 1, "ordinal" => true ])
            .expect("one", [ "value" => 21, "ordinal" => true ])
            .expect("one", [ "value" => 31, "ordinal" => true ])
            .expect("one", [ "value" => 41, "ordinal" => true ])
            .expect("one", [ "value" => 51, "ordinal" => true ])
            .expect("one", [ "value" => 61, "ordinal" => true ])
            .expect("one", [ "value" => 71, "ordinal" => true ])
            .expect("one", [ "value" => 81, "ordinal" => true ])
            .expect("one", [ "value" => 91, "ordinal" => true ])
            .expect("one", [ "value" => 101, "ordinal" => true ])
            .expect("one", [ "value" => 1001, "ordinal" => true ])
            .expect("one", [ "value" => 1, "ordinal" => false ])
            .expect("two", [ "value" => 2, "ordinal" => true ])
            .expect("two", [ "value" => 22, "ordinal" => true ])
            .expect("two", [ "value" => 32, "ordinal" => true ])
            .expect("two", [ "value" => 42, "ordinal" => true ])
            .expect("two", [ "value" => 52, "ordinal" => true ])
            .expect("two", [ "value" => 62, "ordinal" => true ])
            .expect("two", [ "value" => 72, "ordinal" => true ])
            .expect("two", [ "value" => 82, "ordinal" => true ])
            .expect("two", [ "value" => 92, "ordinal" => true ])
            .expect("two", [ "value" => 102, "ordinal" => true ])
            .expect("two", [ "value" => 1002, "ordinal" => true ])
            .expect("few", [ "value" => 3, "ordinal" => true ])
            .expect("few", [ "value" => 23, "ordinal" => true ])
            .expect("few", [ "value" => 33, "ordinal" => true ])
            .expect("few", [ "value" => 43, "ordinal" => true ])
            .expect("few", [ "value" => 53, "ordinal" => true ])
            .expect("few", [ "value" => 63, "ordinal" => true ])
            .expect("few", [ "value" => 73, "ordinal" => true ])
            .expect("few", [ "value" => 83, "ordinal" => true ])
            .expect("few", [ "value" => 93, "ordinal" => true ])
            .expect("few", [ "value" => 103, "ordinal" => true ])
            .expect("few", [ "value" => 1003, "ordinal" => true ])
            .expect("other", [ "value" => 0, "ordinal" => true ])
            .expect("other", [ "value" => 4, "ordinal" => true ])
            .expect("other", [ "value" => 18, "ordinal" => true ])
            .expect("other", [ "value" => 100, "ordinal" => true ])
            .expect("other", [ "value" => 1000, "ordinal" => true ])
            .expect("other", [ "value" => 10000, "ordinal" => true ])
            .expect("other", [ "value" => 100000, "ordinal" => true ])
            .expect("other", [ "value" => 1000000, "ordinal" => true ])
            .expect("other", [ "value" => 0, "ordinal" => false ])
            .expect("other", [ "value" => 2, "ordinal" => false ])
            .expect("other", [ "value" => 16, "ordinal" => false ])
            .expect("other", [ "value" => 100, "ordinal" => false ])
            .expect("other", [ "value" => 1000, "ordinal" => false ])
            .expect("other", [ "value" => 10000, "ordinal" => false ])
            .expect("other", [ "value" => 100000, "ordinal" => false ])
            .expect("other", [ "value" => 1000000, "ordinal" => false ])
            .expect("other", [ "value" => "0.0", "ordinal" => false ])
            .expect("other", [ "value" => "1.5", "ordinal" => false ])
            .expect("other", [ "value" => "10.0", "ordinal" => false ])
            .expect("other", [ "value" => "100.0", "ordinal" => false ])
            .expect("other", [ "value" => "1000.0", "ordinal" => false ])
            .expect("other", [ "value" => "10000.0", "ordinal" => false ])
            .expect("other", [ "value" => "100000.0", "ordinal" => false ])
            .expect("other", [ "value" => "1000000.0", "ordinal" => false ]);

        this.add("fr")
            .expect("one", [ "value" => 1, "ordinal" => true ])
            .expect("one", [ "value" => 0, "ordinal" => false ])
            .expect("one", [ "value" => 1, "ordinal" => false ])
            .expect("one", [ "value" => "0.0", "ordinal" => false ])
            .expect("one", [ "value" => "1.5", "ordinal" => false ])
            .expect("other", [ "value" => 0, "ordinal" => true ])
            .expect("other", [ "value" => 2, "ordinal" => true ])
            .expect("other", [ "value" => 16, "ordinal" => true ])
            .expect("other", [ "value" => 100, "ordinal" => true ])
            .expect("other", [ "value" => 1000, "ordinal" => true ])
            .expect("other", [ "value" => 10000, "ordinal" => true ])
            .expect("other", [ "value" => 100000, "ordinal" => true ])
            .expect("other", [ "value" => 1000000, "ordinal" => true ])
            .expect("other", [ "value" => 2, "ordinal" => false ])
            .expect("other", [ "value" => 17, "ordinal" => false ])
            .expect("other", [ "value" => 100, "ordinal" => false ])
            .expect("other", [ "value" => 1000, "ordinal" => false ])
            .expect("other", [ "value" => 10000, "ordinal" => false ])
            .expect("other", [ "value" => 100000, "ordinal" => false ])
            .expect("other", [ "value" => 1000000, "ordinal" => false ])
            .expect("other", [ "value" => "2.0", "ordinal" => false ])
            .expect("other", [ "value" => "3.5", "ordinal" => false ])
            .expect("other", [ "value" => "10.0", "ordinal" => false ])
            .expect("other", [ "value" => "100.0", "ordinal" => false ])
            .expect("other", [ "value" => "1000.0", "ordinal" => false ])
            .expect("other", [ "value" => "10000.0", "ordinal" => false ])
            .expect("other", [ "value" => "100000.0", "ordinal" => false ])
            .expect("other", [ "value" => "1000000.0", "ordinal" => false ]);
    }

    override function test(t:TestSuite.Test, e:TestSuite.Expectation):Dynamic
    {
        return ICURule.Get(t.input)(e.data.get("value"), e.data.get("ordinal"));
    }
}